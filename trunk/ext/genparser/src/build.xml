<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE project>
<project default="jar" name="Jar for Project MSMLGenericParser">

	<import file="../../../buildscripts/build-paths.xml"/>
	<property file="build.properties"/>
	
	<dirname property="parser.basedir" file="${ant.file.build-paths}" />

	<property name="src.dir"     value="src"/>
	<property name="lib.dir"     value="lib"/>
	<property name="build.dir"   value="bin"/>

	<property name="getdown" location="${src.dir}/../../getdown/"/>
	<property name="jardest" location="${getdown}/genparser.jar"/>
	
	<property name="hasNoChanges" value="true"/>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
	  <classpath>
	    <pathelement location="ant-contrib-1.0b3.jar"/>
	  </classpath>
	</taskdef>

	<macrodef name="echo.ts">
		<attribute name="message"/>
		<sequential>
			<var name="current.time" unset="true"/>
			<tstamp>
				<format property="current.time" pattern="HH:mm:ss.SSS dd.MM.yyyy" locale="de"/>
			</tstamp>
			<echo message="[${current.time}] @{message}"/>
		</sequential>
	</macrodef>
	
	<macrodef name="check.svn">
		<attribute name="loc"/>
		<sequential>
			<if>
				<equals arg1="${hasNoChanges}" arg2="true"/>
				<then>
					<var name="checkres" unset="true"/>
					<echo.ts message="Checking @{loc} for changes in SVN."/>
					<exec executable="./checksvn.sh" outputproperty="checkres">
						<arg line=" @{loc}"/>
					</exec>
					<echo.ts message="Checking @{loc} for changes in SVN resulted in ${checkres} changes"/>
					<if>
						<not>
							<equals arg1="${checkres}" arg2="0" trim="true"/>
						</not>
						<then>
							<var name="hasNoChanges" unset="true"/>
							<property name="hasNoChanges" value="false"/>
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<target name="-printts">
		<echo.ts message="Starting xfsdeploy."/>
	</target>

	<target name="checkout">
		<exec executable="${svn.executable}" dir="${svn.cofolder}" failifexecutionfails="on" >
			<arg line=" update . --non-interactive --username=${svn.usr} --password=${svn.password}" />
		</exec>
	</target>
	
	<target name="failonnochanges">
		<var name="hasNoChanges" unset="true"/>
		<property name="hasNoChanges" value="true"/>
		<check.svn loc="${loc.xml}"/>
		<check.svn loc="${loc.parser}"/>
		<check.svn loc="${loc.msmlapi}"/>
		<check.svn loc="${loc.cmlstruc}"/>
		<if>
			<equals arg1="${hasNoChanges}" arg2="true"/>
			<then>
				<fail message="There are no changes. No need to rebuild."/>
			</then>
		</if>
	</target>
<!--
	NOTE: Only if ${svn.cofolder} location is the same as the root folder of this build-file
	it is ensured that this target will compile and deploy the newest version... obviously.
	If you do not want your working copy to be overwritten when testing this target, then
	DO NOT USE the actual working copy root!! 
-->
	<target name="xfsdeploy" depends="-printts, failonnochanges, checkout, jar">
		<echo.ts message="Coping from ${jardest} to ${xfs.genparserloc}.tmp"/>
		<copy overwrite="true" file="${jardest}" tofile="${xfs.genparserloc}.tmp"/>
		<echo.ts message="Moving from ${xfs.genparserloc}.tmp to ${xfs.genparserloc}"/>
		<move overwrite="true" file="${xfs.genparserloc}.tmp" tofile="${xfs.genparserloc}"/>
		<echo.ts message="All done."/>
	</target>

	<target name="clean">
		<ant antfile="${loc.msmlapi}/build.xml" target="clean" inheritall="false" inheritrefs="false" />
		<ant antfile="${loc.cmlstruc}/build.xml" target="clean" inheritall="false" inheritrefs="false" />
		<delete dir="${build.dir}"/>
	</target>

	<target name="compile" depends="clean">
		<ant antfile="${loc.cmlstruc}/build.xml" target="jar.cronjob" inheritall="false" inheritrefs="false" />

		<mkdir dir="${build.dir}"/>
		<javac fork="on" executable="${javac.cronjob}" srcdir="${src.dir}" includeantruntime="false" destdir="${build.dir}" target="1.6" source="1.6" debug="on">
			<classpath>
				<fileset dir="${loc.msmlapi}" includes="*.jar"/>
				<fileset dir="${loc.cmlstruc}" includes="*.jar"/>
				<fileset dir="${lib.dir}" includes="**/*.jar"/>
			</classpath>
		</javac>

		<copy todir="${build.dir}">
			<fileset dir="${src.dir}" includes="**/*.xml"/>
		</copy>
		<copy todir="${build.dir}/configfiles">
			<fileset dir="${loc.xml}/parserconfigs/" includes="**/*.xml"/>
		</copy>
		<copy todir="${build.dir}/de/ukoeln/msml/genericparser/resources">
			<fileset dir="${src.dir}/../../doc" includes="**/*.pdf"/>
		</copy>
		<copy todir="${build.dir}/de/ukoeln/msml/genericparser/resources">
			<fileset dir="${loc.xml}/dictionaries/parser/" includes="**/*.cml"/>
		</copy>

		<copy todir="${build.dir}/docking">
			<fileset dir="${loc.xml}/dictionaries/docking/" includes="**/*.cml"/>
		</copy>
		<copy todir="${build.dir}/md">
			<fileset dir="${loc.xml}/dictionaries/md/" includes="**/*.cml"/>
		</copy>
		<copy todir="${build.dir}/qc">
			<fileset dir="${loc.xml}/dictionaries/qc/" includes="**/*.cml"/>
		</copy>
		<copy todir="${build.dir}/remd">
			<fileset dir="${loc.xml}/dictionaries/remd" includes="**/*.cml"/>
		</copy>
	</target>

	<target name="jar" depends="compile">
		<property name="jar.dir" location="${getdown}" />
		<property name="loc.tmp.dir" location="${jar.dir}/tmp" />
		<echo.ts message="Tempdir for jar contents: ${loc.tmp.dir}"/>
		<mkdir dir="${jar.dir}"/>
		<mkdir dir="${loc.tmp.dir}"/>
		
		<!-- Create file with build-time -->
		
		<tstamp>
			<format property="logtime" pattern="dd.MM.yyyy ':' HH:mm:ss z" />
		</tstamp>
		<mkdir dir="${loc.tmp.dir}/de/ukoeln/msml/genericparser/"/>
		<touch file="${loc.tmp.dir}/de/ukoeln/msml/genericparser/date.txt"/>
		<echo file="${loc.tmp.dir}/de/ukoeln/msml/genericparser/date.txt" message="Created on ${logtime}"/>
		
		<unjar dest="${loc.tmp.dir}">
			<fileset dir="${lib.dir}" includes="**/*.jar"/>
			<fileset dir="${loc.msmlapi}/libs/" includes="**/*.jar" excludes="**/slf4j*.jar"/>
			<fileset file="${loc.cmlstruc.jar}"/>
			<fileset file="${loc.cmlstruc}/lib" includes="**/*.jar" excludes="**/slf4j*.jar"/>
			<fileset file="${loc.msmlapi.jar}"/>
		</unjar>
		
		<delete dir="${loc.tmp.dir}/org/apache/log4j"/>
		<delete dir="${loc.tmp.dir}/org/slf4j"/>

		<unjar dest="${loc.tmp.dir}">
			<fileset dir="${lib.dir}" includes="**/*.jar"/>
		</unjar>

		<jar destfile="${jardest}" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="de.ukoeln.msml.genericparser.GenericParserMain"/>
				<attribute name="Class-Path" value="."/>
			</manifest>
			<fileset dir="${loc.tmp.dir}" excludes="**/log4j.properties"/>
			<fileset dir="${src.dir}" includes="**/*.properties"/>
		</jar>
		<delete dir="${loc.tmp.dir}" />
	</target>

	<target name="prepare.getdown" depends="jar">
		<java classpath="${getdown}/getdown-tools-1.2.jar" classname="com.threerings.getdown.tools.Digester">
			<arg value="${getdown}"/>
		</java>
	</target>

	<target name="deploy" depends="prepare.getdown">
		<sshexec host="${getdown.host}" username="${getdown.usr}" command="rm -r ${getdown.folder}" password="${getdown.password}"/>
		<sshexec host="${getdown.host}" username="${getdown.usr}" command="mkdir ${getdown.folder}" password="${getdown.password}"/>
		<scp todir="${getdown.usr}@${getdown.host}:${getdown.folder}" password="${getdown.password}">
			<fileset dir="${getdown}">
				<include name="*.txt"/>
				<include name="*.jar"/>
			</fileset>
		</scp>
	</target>
</project>

