package de.mosgrid.ukoeln.templatedesigner.gui.templatetab;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window;

import de.mosgrid.ukoeln.templatedesigner.document.TDTemplateMainDocument;
import de.mosgrid.ukoeln.templatedesigner.helper.StringH;

@SuppressWarnings("deprecation")
public class TDTemplateViewMainChangeDialogComponent extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private HorizontalLayout hlButtons;
	@AutoGenerated
	private Button btnCancel;
	@AutoGenerated
	private Button btnApply;
	@AutoGenerated
	private Label lblNote;
	@AutoGenerated
	private TextField txtDisplayName;
	@AutoGenerated
	private ComboBox cmbNotes;
	@AutoGenerated
	private ComboBox cmbWorkflows;

	private TDTemplateMainDocument _doc;
	private final List<Window.CloseListener> _listener = new ArrayList<Window.CloseListener>();

	private static final long serialVersionUID = 1L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public TDTemplateViewMainChangeDialogComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	public TDTemplateViewMainChangeDialogComponent(TDTemplateMainDocument doc) {
		this();
		_doc = doc;
		init();
	}

	private void init() {
		cmbWorkflows.setContainerDataSource(_doc.getWorkflowsDataSource());
		cmbWorkflows.setNullSelectionAllowed(false);
		cmbWorkflows.addListener(new ValueChangeListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				_doc.updateNotesDataSourceToSelectedWorkflow((String) cmbWorkflows.getValue());
				updateNotesComboBox();
			}
		});
		cmbWorkflows.setValue(_doc.getCurrentWorkflow());

		cmbNotes.setContainerDataSource(_doc.getNotesDataSource());
		cmbNotes.setNullSelectionAllowed(false);
		cmbNotes.setValue(_doc.getNotes());
		updateNotesComboBox();

		txtDisplayName.setValue(_doc.getDisplayName());

		btnApply.addListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				fireCloseRequested();
				_doc.applyWorkflowChanges((String) cmbWorkflows.getValue(), (String) cmbNotes.getValue(),
						(String) txtDisplayName.getValue());
			}
		});

		btnCancel.addListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				fireCloseRequested();
			}
		});
	}

	private void fireCloseRequested() {
		for (Window.CloseListener listener : _listener) {
			listener.windowClose(null);
		}
		_listener.clear();
	}

	public void registerCloseListener(Window.CloseListener listener) {
		_listener.add(listener);
	}

	private void updateNotesComboBox() {
		if (StringH.isNullOrEmpty((String) _doc.getNotes())
				|| !_doc.getNotesDataSource().getItemIds().contains(cmbNotes.getValue()))
			cmbNotes.setValue(null);
		else
			cmbNotes.setValue(_doc.getNotes());

		cmbNotes.setEnabled(cmbNotes.getContainerDataSource().size() > 0);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("460px");
		mainLayout.setHeight("310px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);

		// top-level component properties
		setWidth("460px");
		setHeight("310px");

		// cmbWorkflows
		cmbWorkflows = new ComboBox();
		cmbWorkflows.setCaption("Workflow");
		cmbWorkflows.setImmediate(true);
		cmbWorkflows.setWidth("100.0%");
		cmbWorkflows.setHeight("-1px");
		mainLayout.addComponent(cmbWorkflows);

		// cmbNotes
		cmbNotes = new ComboBox();
		cmbNotes.setCaption("Notes");
		cmbNotes.setImmediate(true);
		cmbNotes.setWidth("100.0%");
		cmbNotes.setHeight("-1px");
		mainLayout.addComponent(cmbNotes);

		// txtDisplayName
		txtDisplayName = new TextField();
		txtDisplayName.setCaption("Display Name");
		txtDisplayName.setImmediate(true);
		txtDisplayName.setWidth("100.0%");
		txtDisplayName.setHeight("-1px");
		txtDisplayName.setSecret(false);
		mainLayout.addComponent(txtDisplayName);

		// lblNote
		lblNote = new Label();
		lblNote.setImmediate(false);
		lblNote.setWidth("-1px");
		lblNote.setHeight("-1px");
		lblNote.setValue("NOTE: Applying changes will save the current template, close and reopen it.");
		mainLayout.addComponent(lblNote);
		mainLayout.setComponentAlignment(lblNote, new Alignment(9));

		// hlButtons
		hlButtons = buildHlButtons();
		mainLayout.addComponent(hlButtons);

		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHlButtons() {
		// common part: create layout
		hlButtons = new HorizontalLayout();
		hlButtons.setImmediate(false);
		hlButtons.setWidth("100.0%");
		hlButtons.setHeight("-1px");
		hlButtons.setMargin(false);
		hlButtons.setSpacing(true);

		// btnApply
		btnApply = new Button();
		btnApply.setCaption("Apply");
		btnApply.setImmediate(true);
		btnApply.setWidth("40.0%");
		btnApply.setHeight("-1px");
		hlButtons.addComponent(btnApply);
		hlButtons.setComponentAlignment(btnApply, new Alignment(48));

		// btnCancel
		btnCancel = new Button();
		btnCancel.setCaption("Cancel");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("40.0%");
		btnCancel.setHeight("-1px");
		hlButtons.addComponent(btnCancel);
		hlButtons.setComponentAlignment(btnCancel, new Alignment(48));

		return hlButtons;
	}

}
