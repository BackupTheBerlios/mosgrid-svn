<?xml version="1.0" encoding="UTF-8"?>
<cml 	convention="convention:compchem"
	xmlns="http://www.xml-cml.org/schema"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:convention="http://www.xml-cml.org/convention/"
	xmlns:units="http://www.xml-cml.org/units/units"
	xmlns:cmlx="http://www.xml-cml.org/schema/cmlx"
	xmlns:compchem="http://www.xml-cml.org/dictionary/compchem/" 
    xmlns:caddsuite="http://www.xml-cml.org/dictionary/docking-input/"
	xmlns:parser="http://www.xml-cml.org/dictionary/parser/"
	xmlns:env="http://www.xml-cml.org/dictionary/environment/"
	xmlns:adapter="http://www.xml-cml.org/dictionary/adapter/jobref">
    
	<module title="Docking using CADDSuite (Expert Mode)" 
		id="ParallelDockingWorkflow_2012-07-13-185251" 
		dictRef="compchem:jobList" 
		cmlx:workflowNotes="fixed concrete with remote url instead of upload"
		cmlx:displayName="CADDSuiteDocking"
		cmlx:workflowGraph="CADDSuiteDocking.png">
		
	<!-- By now there is no parser job configured in the workflow, thus msml won't be passed into workflow-->
        <!--<cmlx:parserConfiguration>
         <parameterList>
         <parameter dictRef="parser:parserJobId">
         <scalar dataType="xsd:string">parser01</scalar>
         </parameter>
         <parameter dictRef="parser:parserJobPort">
         <scalar dataType="xsd:integer">0</scalar>
         </parameter>
         </parameterList>
         </cmlx:parserConfiguration>-->
	
	 <description>
	 <xhtml:p>
                This workflow performs a docking procedure of ligands into a protein. This version allows more advanced user input and is thus suitable for users who have performed docking before. The actual docking process includes splitting of the receptor-file into protein and reference ligand, grid building, docking and rescoring of the dock results. For this workflow a protein structure file containing a protein in complex with a referenceligand and a file with the screening library (i.e., ligands that are to be docked into the protein) is required. 
	 </xhtml:p>
         </description> 
	
	<module title="PDB File Containing the Protein and Reference Ligand" id="PDBCutter" dictRef="compchem:job">
		
		<description>
		<xhtml:p>
		The first important setting is the upload of the protein into wich the workflow should dock the ligands. This input needs to be a stucture in ProteinDataBank format (*.pdb) containing information about the protein and a referenceligand. 
		</xhtml:p>
		<xhtml:p>
		Furthermore name and the chain on which the referencligand can be found have to be specified. If the pdb-file contains only one structure, model 0 should be selected. In case of structures that were created by NMR-spectroscopy often several models exist. In this case only one of these models should be selected for the downstream process. If some chains of resdidues in the structure shall be deleted for the downstream procedure, this can be done by selecting the chains and residues that shall be removed in the last to boxes.
		</xhtml:p>
		</description>
		
		<module dictRef="compchem:initialization">
			<cmlx:uploadList>
			        <cmlx:moleculeUpload fileType="pdb" port="PORT0"></cmlx:moleculeUpload >
			</cmlx:uploadList>
			<parameterList>
				<parameter dictRef="caddsuite:PDBCutter.RemChains" cmlx:editable="true" cmlx:optional="true">
					<scalar dataType="xsd:string"></scalar>
				</parameter>
				<parameter dictRef="caddsuite:PDBCutter.RemResidues" cmlx:editable="true" cmlx:optional="true">
					<scalar dataType="xsd:string"></scalar>
				</parameter>
			</parameterList>
	
			<!--The given init parameters above are set to PDBCutter as flags -->
			<cmlx:adapterConfiguration adapterID="cmdadapter"/>
		</module>
	</module>
        
	<module title="Protein Protonator" id="ProteinProtonator" dictRef="compchem:job">
	        <description>
                <xhtml:p>
		The protein can be protonated at a specific pH. This would normally be some value close to neutral (pH=7), but can be set as wished. (It should be considered that the pH value defined here should also be used in the next step in which the 3D structures for the ligands are created) 
		</xhtml:p>
		</description> 
		<module dictRef="compchem:initialization">
			<parameterList>
				<parameter dictRef="caddsuite:ph" cmlx:editable="true" cmlx:optional="true">
					<scalar dataType="xsd:double">7.4</scalar>
				</parameter>
			</parameterList>
		<!-- ph shall be the same for ProteinProtonator & Ligand3DGenerator -->
			<cmlx:adapterConfiguration adapterID="cmdadapter"/>					
		</module>
	</module>
            
        <module title="Ligand File for Docking" id="LigandFileSplitter" dictRef="compchem:job">
            <description>
            <xhtml:p>
	    Secondly, a screening library has to be defined. This is done by uploading a file containing the 2-dimensional representation of ligand structures that shall be docked. The structures have to be provided in a sd file (*.sdf). 
	    </xhtml:p>
	    <xhtml:p>
	    In the subsequent process some steps are parallelized which leads to the split of the file into several subfiles. This, however, does not affect the docking result, but only the runtime of the workflow.
	    </xhtml:p>
            </description> 
            <module dictRef="compchem:initialization">
                <cmlx:uploadList>
			<cmlx:moleculeUpload fileType="sdf" port="PORT0"></cmlx:moleculeUpload >
		</cmlx:uploadList>
                <parameterList>
                    <parameter dictRef="caddsuite:LigandFileSplitter.Splits" cmlx:editable="false">
                        <scalar dataType="xsd:integer">3</scalar>
                    </parameter>
                </parameterList>
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module>
        
        <module title="LigandFileSplitter Rescoring" id="LigandFileSplitter2" dictRef="compchem:job">
            <module dictRef="compchem:initialization">
                <parameterList>
                    <parameter dictRef="caddsuite:LigandFileSplitter.Splits" cmlx:editable="false">
                        <scalar dataType="xsd:integer">3</scalar>
                    </parameter>
                </parameterList>
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module>
        
	<module title="Ligand3DGenerator" id="Ligand3DGenerator1" dictRef="compchem:job">
                <description>
		<xhtml:p>
                Please specifiy the pH value for the environment in which the generation of the 3D coordinates for the ligands shall be performed. This will influence the addition of hydrogens to the structures. It may be useful to set the environment in such a way that it is similar to the environment used to protonate the target protein.
                </xhtml:p>
                </description>
		<module dictRef="compchem:initialization">
			<parameterList>
				<parameter dictRef="caddsuite:ph" cmlx:editable="true" cmlx:optional="true">
					<scalar dataType="xsd:double">7.4</scalar>
				</parameter>
			</parameterList>      
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module><!-- x3 -->
        
        <module title="Ligand Check" id="LigCheck1" dictRef="compchem:job">
	    <description>
	    <xhtml:p>
	    All the entries in the ligand input file will undergo a set of test to check whether they are actual molecules, have reasonable bond-lengths and partial charges and only unique conformations are passed onto the next step in the workflow. 
	    </xhtml:p>
	    <xhtml:p>
	    It is also possible to change the check for uniqueness to topology or omit completely. Furthermore, the ligand input can be filtered so that only correct molecules are passed on. By default all molecules remain in the ligand file and the final sd file will contain an additional field 'score_ligcheck' holding either the value 0 (Ligand Check tests failed) or 1 (Ligand Check tests passed). An error fraction threshold can be set at which a warning is printed in the stdout if a higher proportion of erroneous molecules is contained in the ligand input. The default setting for this step is: all molecules are kept in file and no special threshold is set. This should be a useful configuration for most of the cases.
            </xhtml:p>
	    </description> 
	    <module dictRef="compchem:initialization">
                <parameterList>
                    <parameter dictRef="caddsuite:LigCheck.error" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:double"></scalar>
                    </parameter>
                    <parameter dictRef="caddsuite:LigCheck.ut" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:string"></scalar>
                    </parameter>
		    <parameter dictRef="caddsuite:LigCheck.nc" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:string"></scalar>
                    </parameter>
		    <parameter dictRef="caddsuite:LigCheck.ri" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:string"></scalar>
                    </parameter>
                </parameterList>
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module>
        
        <module title="Docking Results" id="DockResultMerger" dictRef="compchem:job">
	    <description>
                <xhtml:p>
		Subsequent to the docking process the dockresults (i.e. the ligands with their assigned score) are sorted based on the docking score and thus their ability to bind to the protein. In this step it is possible to constrain the number of ligands that are docked again in a rescoring process to only the best k ligands. This option is however optional. 
		</xhtml:p>
		<xhtml:p>
		If no K-value is selected, all ligands provided in the input sdf are moved on to the rescoring step. By setting a minimal and/or maximal score value it is also possible (but not required) to filter the dockig results. The created .sd file will contain the score, which is mainly the binding-free energy, under the property 'score'.
                </xhtml:p>
            </description> 
            <module dictRef="compchem:initialization">
                <parameterList>
                    <parameter dictRef="caddsuite:DockResultMerger.Min" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:double"></scalar>
                    </parameter>
                    <parameter dictRef="caddsuite:DockResultMerger.Max" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:double"></scalar>
                    </parameter>
                    <parameter dictRef="caddsuite:DockResultMerger.K" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:integer">100</scalar>
                    </parameter>
                </parameterList>
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module>
        
        <module title="Simple Rescorer" id="SimpleRescorer1" dictRef="compchem:job">
	    <description>
                <xhtml:p>
		Rescoring is a process to optimize docking output poses and evaluate the binding-free-energy using one of the scoring functions that can be selected in the menu. The resulting ligand file will then contain a property 're-score' which contains the binding-free energy as it was determined by the scoring function. 
		</xhtml:p>
		<xhtml:p>
                The three options are: PB = Poisson-Boltzman rescoring, MM = AMBER-based rescoring, and PLP = rescoring using pair wise linear potentials.
		</xhtml:p>
            </description>
	    <module dictRef="compchem:initialization">
                <parameterList>
                    <parameter dictRef="caddsuite:SimpleRescorer.Function" cmlx:editable="true">
                        <scalar dataType="xsd:string"></scalar>
                    </parameter>
                    <!-- should be the same input for all 3 nodes -->
                </parameterList>
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module>
        
        <module title="Rescoring Results" id="DockResultMerger2" dictRef="compchem:job">
	    <description>
	    <xhtml:p>
	    In a final step of the workflow the rescoring output poses are sorted again. If required, only the best k poses are kept in the output sd file and also a filter for all hits above a minimum or below a maximum score can be applied. 
	    </xhtml:p>
	    <xhtml:p>
	    In general, the output file contains the ligands with 3-dimensional coordinates in a way that they fit as much as possible into the binding pocket of the target protein. The binding-free energy scores of the docking and rescoring process are appendend as properties at the end of each ligand entry in the sd file and can be identified by the names 'score' and 're-score'.
	    </xhtml:p>
	    </description> 
            <module dictRef="compchem:initialization">
                <parameterList>
                    <parameter dictRef="caddsuite:DockResultMerger.Min" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:double"></scalar>
                    </parameter>
                    <parameter dictRef="caddsuite:DockResultMerger.Max" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:double"></scalar>
                    </parameter>
                    <parameter dictRef="caddsuite:DockResultMerger.K" cmlx:editable="true" cmlx:optional="true">
                        <scalar dataType="xsd:integer">100</scalar>
                    </parameter>
                </parameterList>
                <cmlx:adapterConfiguration adapterID="cmdadapter"/>					
            </module>
        </module>

    </module>
</cml> 
