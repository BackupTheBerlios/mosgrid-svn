package de.mosgrid.ukoeln.templatedesigner.gui.templatetab;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Container;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbstractLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.Component;
import com.vaadin.ui.Field;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import de.mosgrid.ukoeln.templatedesigner.document.TDTemplateJobDocument;
import de.mosgrid.ukoeln.templatedesigner.document.UploadsBean;
import de.mosgrid.ukoeln.templatedesigner.gui.TDViewBase;
import de.mosgrid.ukoeln.templatedesigner.gui.util.DocumentTableFieldFactory;
import de.mosgrid.ukoeln.templatedesigner.gui.util.TDTableComponent;

public class TDJobPartUploads extends TDViewBase<TDTemplateJobDocument> {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TDTableComponent tblUploads;
	@AutoGenerated
	private CheckBox chkHasUploads;

	private static final long serialVersionUID = 3844597982430879125L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public TDJobPartUploads() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	public AbstractLayout getMainLayout() {
		return mainLayout;
	}

	@Override
	protected void doInit() {
		chkHasUploads.setPropertyDataSource(getDoc().getHasUploadsProperty());
		chkHasUploads.addListener(new ValueChangeListener() {

			private static final long serialVersionUID = 2390169365969458424L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				updateHasUploads();
			}
		});

		updateHasUploads();

		initTable();
	}

	private void initTable() {
		tblUploads.init(getDoc().getUploadsDataSource(), getDoc(), new Object[] { UploadsBean.INDEX_PROPID, 
			UploadsBean.FILETYPE, UploadsBean.PORTID, UploadsBean.ISMOLECULE });

		tblUploads.addRemoveListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().removeUpload((UploadsBean) tblUploads.getValue());
			}
		});

		tblUploads.addAddListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().addNewUpload();
			}
		});
	}

	private void updateHasUploads() {
		Boolean enabled = (Boolean) getDoc().getHasUploadsProperty().getValue();
		tblUploads.setEnabled(enabled);
	}

	public void refreshUploadTable() {
		tblUploads.refreshRowCache();
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// chkHasParameter
		chkHasUploads = new CheckBox();
		chkHasUploads.setCaption("Has Uploads");
		chkHasUploads.setImmediate(true);
		chkHasUploads.setWidth("-1px");
		chkHasUploads.setHeight("-1px");
		mainLayout.addComponent(chkHasUploads);

		// tblParams
		tblUploads = new TDTableComponentUploadImpl();
		tblUploads.setImmediate(true);
		tblUploads.setWidth("100.0%");
		tblUploads.setHeight("100.0%");
		mainLayout.addComponent(tblUploads);
		mainLayout.setExpandRatio(tblUploads, 1.0f);

		return mainLayout;
	}

	@SuppressWarnings("serial")
	public class TDTableComponentUploadImpl extends TDTableComponent {

		@Override
		protected TableFieldFactory getTDTableFieldFactory(TDTemplateJobDocument doc) {
			return new TDUploadTableFieldFactory(doc);
		}

		@Override
		protected void setTDTableHeaders(TDTableImpl tdTableImpl) {
			tdTableImpl.setColumnHeader(UploadsBean.INDEX_PROPID, "");
			tdTableImpl.setColumnHeader(UploadsBean.FILETYPE, "Filetype");
			tdTableImpl.setColumnHeader(UploadsBean.PORTID, "Port");
			tdTableImpl.setColumnHeader(UploadsBean.ISMOLECULE, "Is Molecule");
		}
	}
	
	public class TDUploadTableFieldFactory extends DocumentTableFieldFactory {

		private static final long serialVersionUID = 1L;

		public TDUploadTableFieldFactory(TDTemplateJobDocument doc) {
			super(doc);
		}

		@Override
		public Field createField(Container container, Object itemId, Object id, Component uiContext) {
//			final UploadsBean b = (UploadsBean) itemId;
			if (id.equals(UploadsBean.FILETYPE)) {
				TextField chk = new TextField();
				chk.setImmediate(true);
				return chk;
			}

			if (id.equals(UploadsBean.PORTID)) {
				
				BeanItemContainer<String> datasource = this.getDoc().getStringPortDataSource();
				if (datasource == null)
					return null;

				ComboBox cmb = new ComboBox();
				cmb.setContainerDataSource(datasource);
				cmb.setNullSelectionAllowed(false);
				cmb.setImmediate(true);
					
				return cmb;
			}
			
			if (id.equals(UploadsBean.ISMOLECULE)) {
				CheckBox chk = new CheckBox();
				chk.setImmediate(true);
				return chk;
			}
			
			if (id.equals(UploadsBean.INDEX_PROPID)) {
				return null;
			}

			return new TextField();
		}
	}
}
