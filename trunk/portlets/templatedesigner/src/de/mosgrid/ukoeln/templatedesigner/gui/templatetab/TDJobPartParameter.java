package de.mosgrid.ukoeln.templatedesigner.gui.templatetab;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.ui.AbstractLayout;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.TableFieldFactory;
import com.vaadin.ui.VerticalLayout;

import de.mosgrid.msml.util.IDictionary;
import de.mosgrid.ukoeln.templatedesigner.document.IPropertyBean;
import de.mosgrid.ukoeln.templatedesigner.document.PropertyBean;
import de.mosgrid.ukoeln.templatedesigner.document.TDTemplateJobDocument;
import de.mosgrid.ukoeln.templatedesigner.gui.TDViewBase;
import de.mosgrid.ukoeln.templatedesigner.gui.util.TDTableComponent;
import de.mosgrid.ukoeln.templatedesigner.gui.util.TDTableFieldFactory;

public class TDJobPartParameter extends TDViewBase<TDTemplateJobDocument> {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private TDTableComponent tblParams;
	@AutoGenerated
	private CheckBox chkHasParameter;

	private static final long serialVersionUID = 3844597982430879125L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public TDJobPartParameter() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	public AbstractLayout getMainLayout() {
		return mainLayout;
	}

	@Override
	protected void doInit() {
		chkHasParameter.setPropertyDataSource(getDoc().getHasParameterProperty());
		chkHasParameter.addListener(new ValueChangeListener() {

			private static final long serialVersionUID = 2390169365969458424L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				updateHasParameter();
			}
		});

		updateHasParameter();

		initTable();
	}

	private void initTable() {
		tblParams.init(getDoc().getParameterDataSource(), getDoc(), new Object[] { PropertyBean.INDEX_PROPID,
				PropertyBean.DICT_PROPID, PropertyBean.REF_PROPID, PropertyBean.VAL_PROPID, PropertyBean.EDIT_PROPID });

		tblParams.addRemoveListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().removeParameter((IPropertyBean) tblParams.getValue());
			}
		});

		tblParams.addAddListener(new ClickListener() {

			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().addNewParameter();
			}
		});
	}

	private void updateHasParameter() {
		Boolean enabled = (Boolean) getDoc().getHasParameterProperty().getValue();
		tblParams.setEnabled(enabled);
	}

	public void refreshParameterTable() {
		tblParams.refreshRowCache();
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// chkHasParameter
		chkHasParameter = new CheckBox();
		chkHasParameter.setCaption("Has Parameter");
		chkHasParameter.setImmediate(true);
		chkHasParameter.setWidth("-1px");
		chkHasParameter.setHeight("-1px");
		mainLayout.addComponent(chkHasParameter);

		// tblParams
		tblParams = new TDTableComponentParamImpl();
		tblParams.setImmediate(true);
		tblParams.setWidth("100.0%");
		tblParams.setHeight("100.0%");
		mainLayout.addComponent(tblParams);
		mainLayout.setExpandRatio(tblParams, 1.0f);

		return mainLayout;
	}

	@SuppressWarnings("serial")
	public class TDTableComponentParamImpl extends TDTableComponent {

		@Override
		protected TableFieldFactory getTDTableFieldFactory(TDTemplateJobDocument doc) {
			return new TDTableFieldFactory(doc) {

				@Override
				protected BeanItemContainer<IDictionary> getInternalDictionaryDataSource(TDTemplateJobDocument doc) {
					return doc.getDictionariesToCurrentDomain();
				}

				@Override
				protected BeanItemContainer<String> getInternalDictRefDataSource(TDTemplateJobDocument doc,
						IDictionary dict) {
					return doc.getRefsToDict(dict);
				}
			};
		}
	}
}
