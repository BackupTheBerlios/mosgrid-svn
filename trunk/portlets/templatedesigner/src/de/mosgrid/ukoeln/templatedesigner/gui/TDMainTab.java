package de.mosgrid.ukoeln.templatedesigner.gui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbstractLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.Panel;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import de.mosgrid.gui.panels.ImportNameValidator;
import de.mosgrid.portlet.DomainId;
import de.mosgrid.ukoeln.templatedesigner.document.TDMainDocument;
import de.mosgrid.ukoeln.templatedesigner.document.TDMainDocument.TemplateBean;

@SuppressWarnings("deprecation")
public class TDMainTab extends TDViewBase<TDMainDocument> {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private ProgressIndicator piIndicator;

	@AutoGenerated
	private HorizontalLayout nlOpenNew;

	@AutoGenerated
	private Panel pnlNew;

	@AutoGenerated
	private GridLayout glNew;

	@AutoGenerated
	private Button btnCreate;

	@AutoGenerated
	private TextField txtDisplayname;

	@AutoGenerated
	private ComboBox cmbNotes;

	@AutoGenerated
	private ComboBox cmbWorkflow;

	@AutoGenerated
	private Panel pnlOpen;

	@AutoGenerated
	private VerticalLayout vlOpen;

	@AutoGenerated
	private VerticalLayout vlNewAndCloseButtons;

	@AutoGenerated
	private Button btnCloseAll;

	@AutoGenerated
	private HorizontalLayout hlNewButtons;

	@AutoGenerated
	private Button btnDelete;

	@AutoGenerated
	private Button btnOpen;

	@AutoGenerated
	private Button btnCopy;

	@AutoGenerated
	private ListSelect lstTemplates;

	@AutoGenerated
	private ComboBox cmbDomain;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	public enum COMBOCHANGE {
		DOMAIN, WORKFLOW, NOTE
	}
	
	private boolean _openingEnabled = true;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = -5161789779936643780L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public TDMainTab() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		setCaption("Main View");
		setSizeFull();
	}

	@SuppressWarnings("serial")
	@Override
	protected void doInit() {
		
		piIndicator.setPollingInterval(500);
		piIndicator.setEnabled(false);
		piIndicator.setVisible(false);

		lstTemplates.setContainerDataSource(getDoc().getTemplateDataSource());
		lstTemplates.setNullSelectionAllowed(false);
		lstTemplates.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				templateSelectionChanged();
			}
		});

		cmbDomain.setContainerDataSource(getDoc().getDomains());
		cmbDomain.select(null);
		cmbDomain.setItemCaptionMode(ComboBox.ITEM_CAPTION_MODE_EXPLICIT);
		for (DomainId dom : getDoc().getDomains().getItemIds()) {
			cmbDomain.setItemCaption(dom, dom.getName());
		}
		cmbDomain.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				domainChanged();
			}
		});
		domainChanged();

		cmbWorkflow.setContainerDataSource(getDoc().getAllRepoWorkflowItemIdsDataSource());
		cmbWorkflow.select(null);
		cmbWorkflow.addListener(new ValueChangeListener() {

			@Override
			public void valueChange(ValueChangeEvent event) {
				workflowChanged();
			}
		});

		cmbNotes.setContainerDataSource(getDoc().getNotesDataSource());

		txtDisplayname.addValidator(new ImportNameValidator());

		btnCreate.addListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				txtDisplayname.isValid();
				getDoc().createNewTemplate((DomainId) cmbDomain.getValue(), (String) cmbWorkflow.getValue(),
						(String) cmbNotes.getValue(), (String) txtDisplayname.getValue());
			}
		});

		btnDelete.addListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().deleteTemplate((TemplateBean) lstTemplates.getValue());
			}
		});

		btnOpen.addListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().openTemplate((TemplateBean) lstTemplates.getValue());
			}
		});

		btnCopy.addListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().copyTemplate((TemplateBean) lstTemplates.getValue());
			}
		});

		btnCloseAll.addListener(new ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				getDoc().closeAllOpenTemplates(null);
			}
		});
	}
	
	public synchronized void setOpeningEnabled(boolean enabled) {
		_openingEnabled = enabled;
		btnOpen.setEnabled(enabled);
		btnCopy.setEnabled(enabled);
		btnDelete.setEnabled(enabled);
		btnCreate.setEnabled(enabled);
		cmbDomain.setEnabled(enabled);
		lstTemplates.setEnabled(enabled);
	}

	private void workflowChanged() {
		updateCombos(COMBOCHANGE.WORKFLOW);
	}

	private void templateSelectionChanged() {
		boolean enabled = lstTemplates.getValue() != null && _openingEnabled;
		btnDelete.setEnabled(enabled);
		btnOpen.setEnabled(enabled);
		btnCopy.setEnabled(enabled);
	}

	private void domainChanged() {
		boolean enabled = cmbDomain.getValue() != null && _openingEnabled;
		pnlNew.setEnabled(enabled);
		pnlOpen.setEnabled(enabled);
		updateTemplates();
		updateCombos(COMBOCHANGE.DOMAIN);
	}

	private void updateCombos(COMBOCHANGE changeMode) {
		if (changeMode == COMBOCHANGE.DOMAIN) {
			cmbWorkflow.select(null);
			cmbNotes.select(null);
			txtDisplayname.setValue("");
			updateCombos(COMBOCHANGE.WORKFLOW);
			return;
		}

		if (changeMode == COMBOCHANGE.WORKFLOW) {
			getDoc().updateNotes((String) cmbWorkflow.getValue());
			boolean enabled = cmbWorkflow.getValue() != null;
			enabled &= getDoc().getNotesDataSource().size() > 0;
			cmbNotes.setEnabled(enabled);
			if (enabled) {
				cmbNotes.select(getDoc().getNotesDataSource().getIdByIndex(0));
				cmbNotes.setNullSelectionAllowed(false);
			} else {
				cmbNotes.setNullSelectionAllowed(true);
				cmbNotes.select(null);
			}
			updateCombos(COMBOCHANGE.NOTE);
			return;
		}

		if (changeMode == COMBOCHANGE.NOTE) {
			boolean enabled = cmbWorkflow.getValue() != null;
			txtDisplayname.setEnabled(enabled);
		}

		// TODO make adjustments
		btnCreate.setEnabled(_openingEnabled);

	}

	private void updateTemplates() {
		if (cmbDomain.getValue() == null)
			return;

		getDoc().updateWorkflows();
		getDoc().updateTemplatesToDomain((DomainId) cmbDomain.getValue(), true);
	}

	@Override
	public AbstractLayout getMainLayout() {
		return mainLayout;
	}

	public void refreshContent() {
		mainLayout.requestRepaintAll();
	}
	
//	public void updatePI(float val) {
//		synchronized (getApplication()) {
//			piIndicator.setValue(val);
//		}
//	}
	
	public ProgressIndicator getPI() {
		return piIndicator;
	}

	public void disablePI() {
		piIndicator.setEnabled(false);
		piIndicator.setVisible(false);
		piIndicator.setValue(1f);
	}
	
	public void enablePI() {
		piIndicator.setEnabled(true);
		piIndicator.setVisible(true);
		piIndicator.setValue(0f);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// cmbDomain
		cmbDomain = new ComboBox();
		cmbDomain.setCaption("Domain");
		cmbDomain.setImmediate(true);
		cmbDomain.setWidth("-1px");
		cmbDomain.setHeight("-1px");
		cmbDomain.setInvalidAllowed(false);
		mainLayout.addComponent(cmbDomain);
		mainLayout.setComponentAlignment(cmbDomain, new Alignment(20));
		
		// nlOpenNew
		nlOpenNew = buildNlOpenNew();
		mainLayout.addComponent(nlOpenNew);
		mainLayout.setExpandRatio(nlOpenNew, 1.0f);
		mainLayout.setComponentAlignment(nlOpenNew, new Alignment(48));
		
		// piIndicator
		piIndicator = new ProgressIndicator();
		piIndicator.setEnabled(false);
		piIndicator.setImmediate(false);
		piIndicator.setVisible(false);
		piIndicator.setWidth("100.0%");
		piIndicator.setHeight("-1px");
		mainLayout.addComponent(piIndicator);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildNlOpenNew() {
		// common part: create layout
		nlOpenNew = new HorizontalLayout();
		nlOpenNew.setImmediate(false);
		nlOpenNew.setWidth("100.0%");
		nlOpenNew.setHeight("100.0%");
		nlOpenNew.setMargin(false);
		nlOpenNew.setSpacing(true);
		
		// pnlOpen
		pnlOpen = buildPnlOpen();
		nlOpenNew.addComponent(pnlOpen);
		nlOpenNew.setExpandRatio(pnlOpen, 0.5f);
		
		// pnlNew
		pnlNew = buildPnlNew();
		nlOpenNew.addComponent(pnlNew);
		nlOpenNew.setExpandRatio(pnlNew, 0.5f);
		
		return nlOpenNew;
	}

	@AutoGenerated
	private Panel buildPnlOpen() {
		// common part: create layout
		pnlOpen = new Panel();
		pnlOpen.setCaption("Open");
		pnlOpen.setImmediate(false);
		pnlOpen.setWidth("100.0%");
		pnlOpen.setHeight("100.0%");
		
		// vlOpen
		vlOpen = buildVlOpen();
		pnlOpen.setContent(vlOpen);
		
		return pnlOpen;
	}

	@AutoGenerated
	private VerticalLayout buildVlOpen() {
		// common part: create layout
		vlOpen = new VerticalLayout();
		vlOpen.setCaption("Open");
		vlOpen.setImmediate(false);
		vlOpen.setWidth("100.0%");
		vlOpen.setHeight("100.0%");
		vlOpen.setMargin(false);
		
		// lstTemplates
		lstTemplates = new ListSelect();
		lstTemplates.setCaption("Templates");
		lstTemplates.setImmediate(true);
		lstTemplates.setWidth("90.0%");
		lstTemplates.setHeight("90.0%");
		vlOpen.addComponent(lstTemplates);
		vlOpen.setExpandRatio(lstTemplates, 0.8f);
		vlOpen.setComponentAlignment(lstTemplates, new Alignment(20));
		
		// vlNewAndCloseButtons
		vlNewAndCloseButtons = buildVlNewAndCloseButtons();
		vlOpen.addComponent(vlNewAndCloseButtons);
		vlOpen.setExpandRatio(vlNewAndCloseButtons, 0.2f);
		
		return vlOpen;
	}

	@AutoGenerated
	private VerticalLayout buildVlNewAndCloseButtons() {
		// common part: create layout
		vlNewAndCloseButtons = new VerticalLayout();
		vlNewAndCloseButtons.setImmediate(false);
		vlNewAndCloseButtons.setWidth("100.0%");
		vlNewAndCloseButtons.setHeight("100.0%");
		vlNewAndCloseButtons.setMargin(false);
		
		// hlNewButtons
		hlNewButtons = buildHlNewButtons();
		vlNewAndCloseButtons.addComponent(hlNewButtons);
		vlNewAndCloseButtons.setExpandRatio(hlNewButtons, 0.5f);
		
		// btnCloseAll
		btnCloseAll = new Button();
		btnCloseAll.setCaption("Close all Tabs");
		btnCloseAll.setImmediate(true);
		btnCloseAll.setWidth("-1px");
		btnCloseAll.setHeight("-1px");
		vlNewAndCloseButtons.addComponent(btnCloseAll);
		vlNewAndCloseButtons.setExpandRatio(btnCloseAll, 0.5f);
		vlNewAndCloseButtons.setComponentAlignment(btnCloseAll, new Alignment(48));
		
		return vlNewAndCloseButtons;
	}

	@AutoGenerated
	private HorizontalLayout buildHlNewButtons() {
		// common part: create layout
		hlNewButtons = new HorizontalLayout();
		hlNewButtons.setImmediate(false);
		hlNewButtons.setWidth("100.0%");
		hlNewButtons.setHeight("100.0%");
		hlNewButtons.setMargin(false);
		
		// btnOpen
		btnOpen = new Button();
		btnOpen.setCaption("Open");
		btnOpen.setEnabled(false);
		btnOpen.setImmediate(true);
		btnOpen.setWidth("-1px");
		btnOpen.setHeight("-1px");
		hlNewButtons.addComponent(btnOpen);
		hlNewButtons.setComponentAlignment(btnOpen, new Alignment(20));

		// btnCopy
		btnCopy = new Button();
		btnCopy.setCaption("Copy");
		btnCopy.setEnabled(false);
		btnCopy.setImmediate(true);
		btnCopy.setWidth("-1px");
		btnCopy.setHeight("-1px");
		hlNewButtons.addComponent(btnOpen);
		hlNewButtons.setComponentAlignment(btnOpen, new Alignment(20));

		// btnDelete
		btnDelete = new Button();
		btnDelete.setCaption("Delete");
		btnDelete.setEnabled(false);
		btnDelete.setImmediate(true);
		btnDelete.setWidth("-1px");
		btnDelete.setHeight("-1px");
		hlNewButtons.addComponent(btnDelete);
		hlNewButtons.setComponentAlignment(btnDelete, new Alignment(20));
		
		return hlNewButtons;
	}

	@AutoGenerated
	private Panel buildPnlNew() {
		// common part: create layout
		pnlNew = new Panel();
		pnlNew.setCaption("New");
		pnlNew.setImmediate(false);
		pnlNew.setWidth("100.0%");
		pnlNew.setHeight("100.0%");
		
		// glNew
		glNew = buildGlNew();
		pnlNew.setContent(glNew);
		
		return pnlNew;
	}

	@AutoGenerated
	private GridLayout buildGlNew() {
		// common part: create layout
		glNew = new GridLayout();
		glNew.setImmediate(false);
		glNew.setWidth("100.0%");
		glNew.setHeight("100.0%");
		glNew.setMargin(true);
		glNew.setRows(4);
		
		// cmbWorkflow
		cmbWorkflow = new ComboBox();
		cmbWorkflow.setCaption("Workflow");
		cmbWorkflow.setImmediate(true);
		cmbWorkflow.setWidth("70.0%");
		cmbWorkflow.setHeight("-1px");
		cmbWorkflow.setInvalidAllowed(false);
		glNew.addComponent(cmbWorkflow, 0, 0);
		
		// cmbNotes
		cmbNotes = new ComboBox();
		cmbNotes.setCaption("Workflow-Notes");
		cmbNotes.setEnabled(false);
		cmbNotes.setImmediate(false);
		cmbNotes.setWidth("70.0%");
		cmbNotes.setHeight("-1px");
		glNew.addComponent(cmbNotes, 0, 1);
		
		// txtDisplayname
		txtDisplayname = new TextField();
		txtDisplayname.setCaption("Display Name");
		txtDisplayname.setImmediate(true);
		txtDisplayname.setWidth("70.0%");
		txtDisplayname.setHeight("-1px");
		txtDisplayname.setInvalidAllowed(false);
		txtDisplayname.setSecret(false);
		glNew.addComponent(txtDisplayname, 0, 2);
		
		// btnCreate
		btnCreate = new Button();
		btnCreate.setCaption("Create");
		btnCreate.setEnabled(false);
		btnCreate.setImmediate(true);
		btnCreate.setWidth("-1px");
		btnCreate.setHeight("-1px");
		glNew.addComponent(btnCreate, 0, 3);
		
		return glNew;
	}
}
