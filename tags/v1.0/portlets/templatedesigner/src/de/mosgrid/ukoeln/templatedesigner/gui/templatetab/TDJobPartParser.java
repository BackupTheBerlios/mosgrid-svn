package de.mosgrid.ukoeln.templatedesigner.gui.templatetab;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbstractLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import de.mosgrid.ukoeln.templatedesigner.document.TDTemplateJobDocument;
import de.mosgrid.ukoeln.templatedesigner.gui.TDViewBase;

@SuppressWarnings("deprecation")
public class TDJobPartParser extends TDViewBase<TDTemplateJobDocument> {

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private TextField txtOutputFile;

	@AutoGenerated
	private HorizontalLayout hlParserParams;

	@AutoGenerated
	private VerticalLayout vlAdded;

	@AutoGenerated
	private ListSelect listAdded;

	@AutoGenerated
	private VerticalLayout vlButtons;

	@AutoGenerated
	private Button btnRemove;

	@AutoGenerated
	private Button btnAdd;

	@AutoGenerated
	private VerticalLayout vlAvailable;

	@AutoGenerated
	private ListSelect listAvailable;

	@AutoGenerated
	private CheckBox chkHasParser;

	private static final long serialVersionUID = 3844597982430879125L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public TDJobPartParser() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@Override
	public AbstractLayout getMainLayout() {
		return mainLayout;
	}

	@Override
	protected void doInit() {
		chkHasParser.setPropertyDataSource(getDoc().getHasParserDataSource());
		chkHasParser.addListener(new ValueChangeListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				adjustToHasParser();
			}
		});
		adjustToHasParser();
		
		btnAdd.addListener(new ClickListener() {
			
			private static final long serialVersionUID = 8484740533059538333L;

			@Override
			public void buttonClick(ClickEvent event) {
				addSelectedParserConfig();
			}
		});
		btnRemove.addListener(new ClickListener() {
			
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				removeSelectedParserConfig();
			}
		});
		
		listAvailable.setNullSelectionAllowed(false);
		listAvailable.setContainerDataSource(getDoc().getAvailableParserConfigsDataSource());
		listAdded.setNullSelectionAllowed(false);
		listAdded.setContainerDataSource(getDoc().getAddedParserConfigsDataSource());
		txtOutputFile.setPropertyDataSource(getDoc().getParserOutputFileNameDataSource());
		txtOutputFile.setImmediate(true);
	}
	
	private void addSelectedParserConfig() {
		Object item = listAvailable.getValue();
		listAvailable.removeItem(item);
		listAdded.addItem(item);
	}
	
	private void removeSelectedParserConfig() {
		Object item = listAdded.getValue();
		listAdded.removeItem(item);
		listAvailable.addItem(item);
	}
	
	private void adjustToHasParser() {
		boolean val = (Boolean) chkHasParser.getValue();
		listAvailable.setEnabled(val);
		btnAdd.setEnabled(val);
		btnRemove.setEnabled(val);
		listAdded.setEnabled(val);
		txtOutputFile.setEnabled(val);
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// chkHasParser
		chkHasParser = new CheckBox();
		chkHasParser.setCaption("Uses Parser");
		chkHasParser.setImmediate(true);
		chkHasParser.setWidth("-1px");
		chkHasParser.setHeight("-1px");
		mainLayout.addComponent(chkHasParser);
		mainLayout.setExpandRatio(chkHasParser, 0.1f);
		
		// hlParserParams
		hlParserParams = buildHlParserParams();
		mainLayout.addComponent(hlParserParams);
		mainLayout.setExpandRatio(hlParserParams, 0.7f);
		
		// txtOutputFile
		txtOutputFile = new TextField();
		txtOutputFile.setCaption("Outputfilename (optional)");
		txtOutputFile.setImmediate(true);
		txtOutputFile.setWidth("30.0%");
		txtOutputFile.setHeight("-1px");
		txtOutputFile.setSecret(false);
		mainLayout.addComponent(txtOutputFile);
		mainLayout.setExpandRatio(txtOutputFile, 0.2f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHlParserParams() {
		// common part: create layout
		hlParserParams = new HorizontalLayout();
		hlParserParams.setImmediate(false);
		hlParserParams.setWidth("100.0%");
		hlParserParams.setHeight("100.0%");
		hlParserParams.setMargin(false);
		hlParserParams.setSpacing(true);
		
		// vlAvailable
		vlAvailable = buildVlAvailable();
		hlParserParams.addComponent(vlAvailable);
		hlParserParams.setExpandRatio(vlAvailable, 0.4f);
		
		// vlButtons
		vlButtons = buildVlButtons();
		hlParserParams.addComponent(vlButtons);
		hlParserParams.setExpandRatio(vlButtons, 0.2f);
		
		// vlAdded
		vlAdded = buildVlAdded();
		hlParserParams.addComponent(vlAdded);
		hlParserParams.setExpandRatio(vlAdded, 0.4f);
		
		return hlParserParams;
	}

	@AutoGenerated
	private VerticalLayout buildVlAvailable() {
		// common part: create layout
		vlAvailable = new VerticalLayout();
		vlAvailable.setCaption("Available");
		vlAvailable.setImmediate(false);
		vlAvailable.setWidth("100.0%");
		vlAvailable.setHeight("100.0%");
		vlAvailable.setMargin(false);
		
		// listAvailable
		listAvailable = new ListSelect();
		listAvailable.setImmediate(false);
		listAvailable.setWidth("100.0%");
		listAvailable.setHeight("100.0%");
		vlAvailable.addComponent(listAvailable);
		
		return vlAvailable;
	}

	@AutoGenerated
	private VerticalLayout buildVlButtons() {
		// common part: create layout
		vlButtons = new VerticalLayout();
		vlButtons.setImmediate(false);
		vlButtons.setWidth("100.0%");
		vlButtons.setHeight("100.0%");
		vlButtons.setMargin(false);
		vlButtons.setSpacing(true);
		
		// btnAdd
		btnAdd = new Button();
		btnAdd.setCaption(">>");
		btnAdd.setImmediate(true);
		btnAdd.setWidth("80.0%");
		btnAdd.setHeight("-1px");
		vlButtons.addComponent(btnAdd);
		vlButtons.setComponentAlignment(btnAdd, new Alignment(24));
		
		// btnRemove
		btnRemove = new Button();
		btnRemove.setCaption("<<");
		btnRemove.setImmediate(true);
		btnRemove.setWidth("80.0%");
		btnRemove.setHeight("-1px");
		vlButtons.addComponent(btnRemove);
		vlButtons.setComponentAlignment(btnRemove, new Alignment(20));
		
		return vlButtons;
	}

	@AutoGenerated
	private VerticalLayout buildVlAdded() {
		// common part: create layout
		vlAdded = new VerticalLayout();
		vlAdded.setCaption("Added");
		vlAdded.setImmediate(false);
		vlAdded.setWidth("100.0%");
		vlAdded.setHeight("100.0%");
		vlAdded.setMargin(false);
		
		// listAdded
		listAdded = new ListSelect();
		listAdded.setImmediate(false);
		listAdded.setWidth("100.0%");
		listAdded.setHeight("100.0%");
		vlAdded.addComponent(listAdded);
		
		return vlAdded;
	}
}
