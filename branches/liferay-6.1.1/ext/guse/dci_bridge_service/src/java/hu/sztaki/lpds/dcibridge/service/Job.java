/* Copyright 2007-2011 MTA SZTAKI LPDS, Budapest

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. */
/*
 * Descriptor of a job instance to be submitted
 */

package hu.sztaki.lpds.dcibridge.service;

import dci.extension.ExtensionType;
import hu.sztaki.lpds.dcibridge.util.XMLHandler;
import hu.sztaki.lpds.metabroker.client.ResourceBean;
import hu.sztaki.lpds.submitter.status.Client;
import java.net.URL;
import java.util.Hashtable;
import org.ggf.schemas.bes._2006._08.bes_factory.ActivityStateEnumeration;
import org.ggf.schemas.bes._2006._08.bes_factory.CreateActivityResponseType;
import org.ggf.schemas.bes._2006._08.bes_factory.CreateActivityType;
import org.ggf.schemas.jsdl._2005._11.jsdl.JobDefinitionType;

/**
 * @author krisztian karoczkai
 */
public class Job {
    private JobDefinitionType jsdl;
    private String id;
    private String middlewareid;
    private byte flag;
    private byte middlewarestatus = 0;
    private long middlewarestatuschanged = System.currentTimeMillis();
    private Object middlewareobject;
    private ActivityStateEnumeration status=ActivityStateEnumeration.PENDING;
    private ActivityStateEnumeration pubStatus=ActivityStateEnumeration.PENDING;
    private Hashtable<String,String> parameters;
    private String resource="DCI-BRIDGE";
    private long timeStamp=System.currentTimeMillis();
    private long statusNumber=10;
    private CreateActivityResponseType forwardID=null;
    private URL forwardURL=null;

    public CreateActivityResponseType getForwardID() {return forwardID;}
    public void setForwardID(CreateActivityResponseType forwardID) {this.forwardID = forwardID;}

    public URL getForwardURL() {
        return forwardURL;
    }

    public void setForwardURL(URL forwardURL) {
        this.forwardURL = forwardURL;
    }



    private ResourceBean configuredResource=new ResourceBean();

    public ResourceBean getConfiguredResource() {
        return configuredResource;
    }

    public void setConfiguredResource(ResourceBean configuredResource) {
        this.configuredResource = configuredResource;
    }

/**
 * Class constructor
 * @param jsdl BES descriptor
 */
    public Job(CreateActivityType description,String pID){
        this.jsdl = description.getActivityDocument().getJobDefinition();
        this.id=pID;
    }
/**
 * query of the destination resource of the job submission
 * @return name of the resource
 */
    public String getResource() {return resource;}
/**
 * setting of the destination resource of the job submission
 * @param name of the resource
 */
    public void setResource(String resource) {
        if(!this.resource.equals(resource)){
            this.resource = resource;
            sendStatus();
        }
    }
/**
 * query of timestamp belonging to the last job releted event
 * @return timestamp (1/1000sec)
 */
    public long getTimestamp() {return timeStamp;}
/**
 * setting of timestamp belonging to a job releted event
 * @param timeStamp tmestamp (1/1000sec)
 */
    public void setTimestamp(long timeStamp) {this.timeStamp = timeStamp;}

/**
 * query of BES descriptor belonging to the job
 * @return BES descriptor
 */
    public JobDefinitionType getJSDL(){return jsdl;}

/**
 * setting of  JSDL beloning to the job
 * @param pValue  descriptor
 */
    public void setJSDL(JobDefinitionType pValue){jsdl=pValue;}

/**
 * query of the internal identifier of job
 * @return  uniqe (UUID) string 
 */
    public String getId() {return id;}
/**
 * setting of the internal identifier of job
 * @param id uniqe (UUID) string 
 */
    public void setId(String id) {this.id = id;}
/**
 * query of the middleware id of the job
 * @return middleware id of the job
 */
    public String getMiddlewareId() {return middlewareid;}
/**
 * setting of the middleware id of the job
 * @param id  middleware id of the job
 */
    public void setMiddlewareId(String middlewareid) {this.middlewareid = middlewareid;}

    /**
     * Time of change of the middleware state. 
     * @return time
     */
    public long getMiddlewareStatusChanged() {return middlewarestatuschanged;}
/**
 * query of the state of the middleware of the Job
 * @return the state of the middleware of the Job (a string generated by the middlewarwe)
 */
    public byte getMiddlewareStatus() {return middlewarestatus;}
/**
 * setting of the new state of the middleware of the job together with the timestamp of the change
 * @param id  state identifier reveived from the midleware
 */
    public void setMiddlewareStatus(byte middlewarestatus) {
        this.middlewarestatus = middlewarestatus;
        middlewarestatuschanged = System.currentTimeMillis();
    }
/**
 * Returns middleware specific objet.
 * @return
 */
    public Object getMiddlewareObj() {
        return middlewareobject;
    }
/**
 * Sets middleware specific object for this job.
 * @param pObj
 */
    public void setMiddlewareObj(Object pObj){
        this.middlewareobject = pObj;
    }
 /**
 * query of actual operation flag. Its indicates what kind of operation must be performed on the job (submit, state request, abort) 
 * @return value of flag
 */
    public byte getFlag() {return flag;}
/**
 * setting of actual operation flag. Its indicates what kind of operation must be performed on the job (submit, state request, abort)
 * @param flag code of next operation
 */
    public void setFlag(byte flag) {this.flag = flag;}
/**
 * query of job state
 * @return job status code
 */
    public ActivityStateEnumeration getStatus() {return status;}
/**
 * setting of job state
 * @param status job status code
 */
    public void setStatus(ActivityStateEnumeration status) {this.status = status;}

/**
 * query of job state
 * @return job status code
 */
    public ActivityStateEnumeration getPubStatus() {return pubStatus;}
/**
 * setting of job state
 * @param status job status code
 */
    public void setPubStatus(ActivityStateEnumeration status) {
        this.pubStatus = status;
        sendStatus();
    }

/**
 * query of status sending counter
 * @return this counter starts from the value 10
 */
    public long getStatusNumber(){return ++statusNumber;}

    private void sendStatus(){
        Base.initLogg(this.getId(), "logg.job.callback");
        try{
            ExtensionType callBack=XMLHandler.getData(getJSDL().getAny(), ExtensionType.class);
            Client cl=new Client(callBack.getWfiservice());
            cl.sendStatus(this);
        }
        catch(Exception e){e.printStackTrace();}
        Base.writeJobLogg(this.getId(), LB.INFO,pubStatus.name()+"/"+resource);
    }

}
