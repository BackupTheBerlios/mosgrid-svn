// Copyright 2009 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import com.google.visualization.datasource.DataSourceServlet;
import com.google.visualization.datasource.base.TypeMismatchException;
import com.google.visualization.datasource.datatable.ColumnDescription;
import com.google.visualization.datasource.datatable.DataTable;
import com.google.visualization.datasource.datatable.value.ValueType;
import com.google.visualization.datasource.query.Query;

import hu.sztaki.lpds.statistics.db.DBBase;
import hu.sztaki.lpds.statistics.db.MenuInformationHarvester;
import hu.sztaki.lpds.statistics.db.MetricInformation;
import hu.sztaki.lpds.statistics.db.MetricInformationHarvester;
import hu.sztaki.lpds.statistics.db.StatisticLevel;
import hu.sztaki.lpds.statistics.db.StatistiticsInformationHarvester;
import hu.sztaki.lpds.statistics.portlet.SimpleStats;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.ArrayList;

import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;

/**
 * A demo servlet for serving a simple, constant data table.
 * This servlet extends DataSourceServlet.
 *
 * @author Nimrod T.
 */
public class PortalStatServlet extends DataSourceServlet {


  @Override
  public DataTable generateDataTable(Query query, HttpServletRequest request) {
    // Create a data table.

    DataTable data = new DataTable();

        String prettyName = "";

        ArrayList<Double> dataForChart = new ArrayList<Double>();
        ArrayList<String> titlesForChart = new ArrayList<String>();
        int maxSize = 0;
        DBBase db = new DBBase();
        MetricInformationHarvester mif = new MetricInformationHarvester(db);
        Map<String, List<MetricInformation>> ms =  mif.getMetric(StatisticLevel.PORTAL);
         StatistiticsInformationHarvester statsFac = new StatistiticsInformationHarvester(db);
         MenuInformationHarvester mp = new MenuInformationHarvester(db);
          String portalURL = mp.getPortal();
         statsFac.getPortal(ms, portalURL);
                //Outputs
        SimpleStats stat = new SimpleStats(ms);

        java.util.List<hu.sztaki.lpds.statistics.db.MetricInformation> getCat7 = stat.retrieveCategoryStat("7");
        if (getCat7 == null) {
            System.out.println("No Info FAIL!!!");
        } else {
            ArrayList<ColumnDescription> cd = new ArrayList<ColumnDescription>();
            for (hu.sztaki.lpds.statistics.db.MetricInformation info : getCat7) {
                try {
                    prettyName = info.getPretty_name();
                    NumberFormat format = NumberFormat.getInstance(Locale.FRANCE);
                    Number number = format.parse(info.getData());
                    double ddata = number.doubleValue();
                    
                    System.out.println("parsed double data : " + ddata);
                    //    maxSize = (int) (maxSize + data);
                    titlesForChart.add(prettyName);
                    dataForChart.add(ddata);
                } catch (ParseException ex) {
                    Logger.getLogger(PortalStatServlet.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            cd.add(new ColumnDescription("States", ValueType.TEXT, "States"));
            cd.add(new ColumnDescription("Average time spent in state", ValueType.NUMBER, "Average time spent in state"));
            data.addColumns(cd);
            for (int i=0; i<titlesForChart.size();++i){
                    try{

                    data.addRowFromValues(titlesForChart.get(i),dataForChart.get(i));
                        } catch (TypeMismatchException e) {
                    System.out.println("Invalid type!");
                }
            }
            

        }

    

    // Fill the data table.
    return data;
  }

  /**
   * NOTE: By default, this function returns true, which means that cross
   * domain requests are rejected.
   * This check is disabled here so examples can be used directly from the
   * address bar of the browser. Bear in mind that this exposes your
   * data source to xsrf attacks.
   * If the only use of the data source url is from your application,
   * that runs on the same domain, it is better to remain in restricted mode.
   */
  @Override
  protected boolean isRestrictedAccessMode() {
    return false;
  }
}