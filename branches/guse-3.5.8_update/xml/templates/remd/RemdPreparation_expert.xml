<?xml version="1.0" encoding="UTF-8"?>
<cml 	convention="convention:compchem"
	xmlns="http://www.xml-cml.org/schema"
	xmlns:convention="http://www.xml-cml.org/convention/"
	xmlns:units="http://www.xml-cml.org/units/units"
	xmlns:cmlx="http://www.xml-cml.org/schema/cmlx"
	xmlns:compchem="http://www.xml-cml.org/dictionary/compchem/" 
	xmlns:gromacs="http://www.xml-cml.org/dictionary/md-input/"
	xmlns:parser="http://www.xml-cml.org/dictionary/parser/"
	xmlns:env="http://www.xml-cml.org/dictionary/environment/"
	xmlns:xhtml="http://www.w3.org/1999/xhtml"
	xmlns:adapter="http://www.xml-cml.org/dictionary/adapter/jobref">

	<module title="REMD Preparation (expert)"
		id="RemdPrep" 
		dictRef="compchem:jobList" 
		cmlx:workflowNotes="REMD preparation workflow"
		cmlx:displayName="RemdPrep"
		cmlx:workflowGraph="RemdPrep.png">
		<description>
        <xhtml:p>
        This workflow helps you to prepare a system for REMD and creates the desired input files for subsequent workflows. 
		Therefore your protein gets boxed, solvated and energy minimized. 
		System preparation has to be done in a separate workflow because systems size, especially the number of water molecules,
		has to be known for computing the optimal number of replicas.
		</xhtml:p>
		</description>
		<module title="Uploads" id="RemdPrepInput" dictRef="compchem:job">
			<description>
			<xhtml:p>Please upload or select a protein file in pdb format.</xhtml:p>
			<xhtml:p>If your pdb file contains more than one protein chain, hetero atoms or water molecules, you must select the groups which shall be used in the simulation.
			</xhtml:p>
			</description>

			<module dictRef="compchem:initialization">
				<cmlx:uploadList>
					<cmlx:moleculeUpload fileType="pdb" job="remd-posres" port="protein"></cmlx:moleculeUpload>
				</cmlx:uploadList>
			</module>
		</module>
		<module title="Preprocessing" id="remd-posres" dictRef="compchem:job">
			<description>
			<xhtml:p>This job sets up the topology of your system.</xhtml:p>
			</description>
			<module dictRef="compchem:initialization">
				<parameterList>
					<!-- editable params -->
					<parameter dictRef="gromacs:pdb2gmx.Forcefield" cmlx:editable="false">
						<scalar dataType="xsd:string">oplsaa</scalar>
					</parameter>
					<parameter dictRef="gromacs:pdb2gmx.Watermodel" cmlx:editable="false">
						<scalar dataType="xsd:string">tip4p</scalar>
					</parameter>
				</parameterList>
	
				<!--The given init parameters above are set to pdb2gmx with flags-->
				<cmlx:adapterConfiguration adapterID="cmdadapter"/>
			</module>
		</module>
		<module title="Boxing" id="boxing" dictRef="compchem:job">
			<description>
                                <xhtml:p>
				This job wraps your protein in a box and creates the system boundaries.
				You may change these parameters, but the defaults actually perform well for REMD.
				</xhtml:p>
                        </description>

                        <module dictRef="compchem:initialization">
                                <parameterList>
                                        <!-- editable params -->
                                        <parameter dictRef="gromacs:editconf.BoxType" cmlx:editable="true">
                                                <scalar dataType="xsd:string">dodecahedron</scalar>
                                        </parameter>
                                        <parameter dictRef="gromacs:editconf.Distance" cmlx:editable="true">
                                                <scalar dataType="xsd:double">1.0</scalar>
                                        </parameter>
                                </parameterList>
        
                                <!--The given init parameters above are set to pdb2gmx with flags-->
                                <cmlx:adapterConfiguration adapterID="cmdadapter"/>
                        </module>
                </module>
		<module title="Solvation" id="solvation" dictRef="compchem:job">
			<description>
			<xhtml:p>
			This job solvates your protein in water.
			</xhtml:p>
			<xhtml:p>
			Systems size, especially the number of water molecules, is essential for computing the optimal number of replicas. 
			The allowed temperature difference between replicas decreases with increasing system size.
			Bigger systems thus require more replicas to cover the desired temperature range!
			</xhtml:p>
			<xhtml:p>
			T-REMD might get infeasible for systems bigger than 10000 atoms.
			</xhtml:p>
			</description>
			<module dictRef="compchem:initialization">
				<parameterList>
				<!-- editable params -->
					<parameter dictRef="gromacs:genbox.MaxSolvents" cmlx:editable="true">
						<scalar dataType="xsd:int">8000</scalar>
					</parameter>
				</parameterList>
                                <!--The given init parameters above are set to pdb2gmx with flags-->
				<cmlx:adapterConfiguration adapterID="cmdadapter"/>
			</module>
		</module>
		<module title="Ionization" id="remd-topol" dictRef="compchem:job">
                        <description>
                                <xhtml:p>
                                Some water molecules will be replaced by ions to obtain a neutral netcharge. You can specify the ion concentration.
                                </xhtml:p>
                        </description>

                        <module dictRef="compchem:initialization">
                                <parameterList>
                                        <!-- editable params -->
                                        <parameter dictRef="gromacs:genion.SaltConcentration" cmlx:editable="true">
                                                <scalar dataType="xsd:double">0.15</scalar>
                                        </parameter>
                                </parameterList>

                                <!--The given init parameters above are set to pdb2gmx with flags-->
                                <cmlx:adapterConfiguration adapterID="cmdadapter"/>
                        </module>
                </module>
		<module title="EM Precompiler" id="precomp" dictRef="compchem:job">
			<description>
                                <xhtml:p>
                                The precompiler creates a run input file (*.tpr) for the energy minimization.
                                </xhtml:p>
                        </description>

			<module dictRef="compchem:initialization">				
				<parameterList>
					<!-- editable params -->
					<parameter dictRef="gromacs:grompp.NumberOfSteps" cmlx:editable="true">
						<scalar dataType="xsd:integer">5000</scalar>
					</parameter>
					<!-- fixed params -->
					<parameter dictRef="gromacs:grompp.positionRestraints" cmlx:editable="false">
                                                <scalar dataType="xsd:string">-DFLEXIBLE</scalar>
                                        </parameter>
					<parameter dictRef="gromacs:grompp.MinimizerAlgorithm" cmlx:editable="false">
						<scalar dataType="xsd:string">steep</scalar>
					</parameter>	
					<parameter dictRef="gromacs:grompp.Min.Tolerance" cmlx:editable="true">
						<scalar dataType="xsd:double">1000.0</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.Min.Stepsize" cmlx:editable="true">
						<scalar dataType="xsd:double">0.01</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.NSA.updateFrequency" cmlx:editable="false">
						<scalar dataType="xsd:integer">1</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.NeighbourSearchingAlgorithm" cmlx:editable="false">
						<scalar dataType="xsd:string">grid</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.NSA.radius" cmlx:editable="false">
						<scalar dataType="xsd:double">1.0</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.ElectrostaticsAlgorithm" cmlx:editable="false">
						<scalar dataType="xsd:string">PME</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.ESA.outerRadius" cmlx:editable="false">
						<scalar dataType="xsd:double">1.0</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.VdWA.outerRadius" cmlx:editable="false">
						<scalar dataType="xsd:double">1.0</scalar>
					</parameter>
					<parameter dictRef="gromacs:grompp.NSA.PBC" cmlx:editable="false">
						<scalar dataType="xsd:string">xyz</scalar>
					</parameter>
				</parameterList>

				<!--The given init parameters above shall be converted to a .mdp file Port=2-->
				<cmlx:adapterConfiguration adapterID="mdadapter" portName="mdpfile" fileExtension="mdp"/>
			</module>
		</module>
		<module title="Ionization precompiler" id="ionprep" dictRef="compchem:job">
			<module dictRef="compchem:initialization">
				<cmlx:adapterConfiguration adapterID="jobref" portName="mdpfile" fileExtension="mdp">
					<parameter dictRef="adapter:jobref">
						<scalar dataType="xsd:string">precomp</scalar>
					</parameter>
				</cmlx:adapterConfiguration>
			</module>			
		</module>
		<module title="EM" id="remd-pdb" dictRef="compchem:job">
			<description>
                                <xhtml:p>
                                This job performs the energy minimization of your protein.
                                </xhtml:p>
                        </description>
			<module dictRef="compchem:environment">
				<propertyList>
					<property dictRef="env:small.nodes" cmlx:editable="true">
						<scalar dataType="xsd:integer">1</scalar>
					</property>
					<property dictRef="env:small.cores" cmlx:editable="true">
						<scalar dataType="xsd:integer">4</scalar>
					</property>
					<property dictRef="env:small.walltime" cmlx:editable="true">
						<scalar dataType="xsd:integer">120</scalar>
					</property>
					<property dictRef="env:small.memory" cmlx:editable="true">
						<scalar dataType="xsd:integer">2000</scalar>
					</property>
				</propertyList>
			</module>
		</module>
	</module>
</cml> 
